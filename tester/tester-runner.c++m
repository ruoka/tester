export module tester:runner;
import: output;
import: data;
import: engine;
import std;

namespace tester
{

using namespace std::literals;
using namespace data;

export class runner
{
public:

    runner(std::string_view tests = "") : m_tests{tests}
    {}

    auto print_test_cases()
    {
        std::clog << "Test cases:\n";
        for(auto tc : test_cases)
            if(included(tc))
                std::clog << output::color::text::yellow
                          << tc.test_name
                          << " (" << tc.file_name << " " << tc.line << ':' << tc.column << ")"
                          << output::color::reset << std::endl;
    }

    auto run_tests()
    {
        engine::run_test_cases([this](const auto& tc){return this->excluded(tc);});
    }

    auto print_test_results()
    {
        std::clog << output::color::text::yellow
                  << "Test results:"
                  << output::color::reset << '\n';
        for(auto result : test_results)
            std::clog << result.output;
    }

    auto print_test_failures()
    {
        std::clog << output::color::text::red
                  << "Test failures:"
                  << output::color::reset << '\n';
        for(auto result : test_results)
            if(not result.success)
                std::clog << result.output;
    }

    auto print_test_statistics()
    {
        std::clog << output::color::text::yellow
                  << "Test statistics:" << '\n'
                  << "total tests: "<< statistics.total_tests << '\n'
                  << "successful tests: "<< statistics.successful_tests << '\n'
                  << "total assertions: "<< statistics.total_assertions << '\n'
                  << "successful assertions: "<< statistics.successful_assertions
                  << output::color::reset << std::endl;
    }

private:

    std::string_view m_tests;

    bool included(const test_case& tc) const
    {
        return m_tests.empty() or
               not (tc.test_name.starts_with("scenario") or tc.test_name.starts_with("test_case")) or
               tc.test_name.contains(m_tests);
    }

    bool excluded(const test_case& tc) const
    {
        return not included(tc);
    }
};

}